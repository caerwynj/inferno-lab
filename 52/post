lab 52 - one liners

Some limbo programs can be replaced with shell one liners, and others can be replaced with more general programs that reduce the overal line count but increase functionality. I'll look at the few I've discovered.

The <b>/prog</b> filesystem exposes a textual interface that allows existing software tools to work with it. This implies I do not need a custom set of limbo tools to read and write to this filesystem. For example, <i>ps</i> is a 61 line limbo program, but I can do the same thing in one line of shell,
<pre>
fn ps {sed '' /prog/*/status |sort -n}
</pre><p>
This is the great power of Inferno. Simple textual interfaces exposed as files and a small set of software tools working together using pipes.
I can also try <i>kill</i> and <i>broke</i>. In this case I make the functionality more like Plan 9. Each command writes to output the commands that can be sent back to the shell to actually perform the kill action. (→ means wrapped to fit line)
<pre>
fn kill {
	sed -n '/' ^ $1 ^ '/s/^ +([0-9][0-9]*) +(.*)/echo kill >\/prog\/\1\/ctl # \2/p' /prog/*/status
}

fn broke {
	sed -n '/broke/s/^ +([0-9][0-9]*) +(.*)/→
echo kill >\/prog\/\1\/ctl # \2/p' /prog/*/status
}
</pre><p>
This reduces the limbo line count a little more. It also is more suggestive of what can be done when filesystems are implemented with an appreciation of the system.  Take this example from Plan 9 translated for Inferno which shows who is logged into the system:
<pre>
fn who {
	ps | sed '/Broken/d
	/Exiting/d
	s% +[0-9]+ +[0-9]+ +([a-zA-Z0-9]+) +.*$%\1%' | sort | uniq
}
</pre>
<p>
Another good example is the <b>/net</b> filesystem. I can implement netstat as a script too (almost, it doesn't include the user name, but i wanted to keep it short).
<pre>
fn netstat {
	for i in /net/*/[0-9] {echo  $i `{cat $i/status $i/local $i/remote}}
}
</pre><p>
<i>Lookman</i> has bothered me because it could be more general. This is obvious if you're aware of the <i>look</i> command from Plan 9. Why not just port <i>look</i> and wrap it in a shell script to implement <i>lookman</i>?
<pre>
fn lookman {
	look $* /man/index | sed 's/^.*	//' |sort |uniq |sed 's;/man/;;
s;(.*)/(.*);man \1 \2 # \2(\1);'
}
</pre><p>
I've again taken the idea from Plan 9. In my opinion this is better than the Inferno original. It prints the man page reference syntax, which works beautifully with Acme plumbing. I've included the source for the <i>look</i> port in this lab files.
<p>
Another not-general-enough implementation is <i>src</i>. It is supposed to print the source file for a named dis file. The problem here is that the dis file is binary format so it needs a limbo library to extract the source file name. How is this done in Plan 9's <i>src</i> script? It uses <i>adb</i>. Well I don't have that. But I do have <i>mdb</i>. Maybe I should extend it with a few commands to examine a dis file. This would replace <i>wm/rt</i> which doesn't really fit in the system because it can't be used within scripts. So now <i>src</i> can be made a script, and changed slightly
<pre>
fn src {
	file := $1
	if {ftest -e $file} {
		mdb $file '$s'
	} {ftest -e $file.dis} {
		mdb $file.dis '$s'
	} {ftest -e /dis/$file} {
		mdb /dis/$file '$s'
	} {ftest -e /dis/$file.dis} {
		mdb /dis/$file.dis '$s'
	} 
}
</pre><p>
Okay, one more. This is a script to implement <i>calendar</i> but not as feature rich as the UNIX version. The calendar file is supposed to be a list of multi-line records separated by blank lines, with any line in the record matching the date format 20060203, or just 0203 for recurring appointments, for example. This uses the <i>xp</i> command from lab 50.
<pre>
fn calendar {
smon:='s/Jan/01/
	s/Feb/02/
	s/Mar/03/
	s/Apr/04/
	s/May/05/
	s/Jun/06/
	s/Jul/07/
	s/Aug/08/
	s/Sep/09/
	s/Oct/10/
	s/Nov/11/
	s/Dec/12/'
	(d m md tim tz yr) := `{date |sed $smon}
	xp ',x/(.+\n)+/ g/('^ $yr ^')?'^ $m ^ $md  ^ '/p' $home/calendar
}
</pre>
<p>Textual manipulation with pattern-action languages are the hallmark of Plan9 and Inferno systems. File systems that expose textual interfaces play well with the rest of the system. Sometimes in inferno it feels like this isn't exploited or is hidden below the surface. Because commands are implemented in Limbo when they don't need to be, or a more general tool could exist, or where a wm GUI tool exists instead of a command line tool.

